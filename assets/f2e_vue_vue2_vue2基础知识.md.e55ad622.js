import{_ as t,o as a,c as e,X as d}from"./chunks/framework.28451963.js";const y=JSON.parse('{"title":"Vue2简介","description":"","frontmatter":{},"headers":[],"relativePath":"f2e/vue/vue2/vue2基础知识.md","filePath":"f2e/vue/vue2/vue2基础知识.md","lastUpdated":1704191114000}'),s={name:"f2e/vue/vue2/vue2基础知识.md"},r=d(`<h1 id="vue2简介" tabindex="-1">Vue2简介 <a class="header-anchor" href="#vue2简介" aria-label="Permalink to &quot;Vue2简介&quot;">​</a></h1><h2 id="_1、简介" tabindex="-1">1、简介 <a class="header-anchor" href="#_1、简介" aria-label="Permalink to &quot;1、简介&quot;">​</a></h2><p><code>Vue</code>(发音为 /vjuː/，类似 view) 是一款用于构建用户界面的<code>JavaScript</code>框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><h2 id="_2、官网" tabindex="-1">2、官网 <a class="header-anchor" href="#_2、官网" aria-label="Permalink to &quot;2、官网&quot;">​</a></h2><p><a href="https://v2.cn.vuejs.org/" target="_blank" rel="noreferrer">https://v2.cn.vuejs.org/</a></p><h2 id="_3、常见指令" tabindex="-1">3、常见指令 <a class="header-anchor" href="#_3、常见指令" aria-label="Permalink to &quot;3、常见指令&quot;">​</a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>v-on</td><td>绑定事件<br>① &quot;v-on&quot;可以简写成@<br>② 可以使用“@[变量名]”，绑定动态事件<br>③ 事件处理函数中，可以使用事件对象 event</td></tr><tr><td>v-if ，v-else-if ，v-else</td><td>条件渲染,通过控制<code>dom</code>结构的存在与否来实现区块的显示和隐藏</td></tr><tr><td>v-show</td><td>条件渲染：通过控制元素的<code>display</code>属性来控制区块的显示和隐藏</td></tr><tr><td>v-for</td><td>列表渲染</td></tr><tr><td>v-model</td><td>数据双向绑定</td></tr><tr><td>v-bind</td><td>①&quot;v-bind:&quot;可以简写成&quot;:&quot;<br>② 可以将标签/组件上的某个属性与数据变量进行绑定<br>③ 可以使用 &quot;:[变量名]&quot;，绑定动态属性</td></tr><tr><td>v-html</td><td>识别变量中的<code>html</code>标签</td></tr><tr><td>v-once</td><td>标签/组件只渲染一次</td></tr></tbody></table><h2 id="_4、事件修饰符" tabindex="-1">4、事件修饰符 <a class="header-anchor" href="#_4、事件修饰符" aria-label="Permalink to &quot;4、事件修饰符&quot;">​</a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>.prevent</td><td>阻止默认事件</td></tr><tr><td>.stop</td><td>阻止事件冒泡</td></tr><tr><td>.self</td><td>只有操作自身时，才会触发自身上的事件（常用于点击事件，即只有点击自己时，才会触发自身上绑定的点击事件）</td></tr><tr><td>.capture</td><td>把事件的运营模式变成捕获（不常用）</td></tr><tr><td>.once</td><td>事件只执行一次</td></tr><tr><td>.passive</td><td>提升事件性能，常用于滚动事件 scroll（不常用）</td></tr></tbody></table><h2 id="_5、样式相关" tabindex="-1">5、样式相关 <a class="header-anchor" href="#_5、样式相关" aria-label="Permalink to &quot;5、样式相关&quot;">​</a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>:class</td><td>v-bind:class 的简写形式，为元素绑定动态类名</td></tr><tr><td>$attrs</td><td>可以用来获取父组件绑定在子组件身上的属性（Non-Props 属性）</td></tr><tr><td>:style</td><td>v-bind:style 的简写形式，为元素绑定动态的行内样式</td></tr></tbody></table><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h2 id="_6、按键修饰符" tabindex="-1">6、按键修饰符 <a class="header-anchor" href="#_6、按键修饰符" aria-label="Permalink to &quot;6、按键修饰符&quot;">​</a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>.enter</td><td>按键是enter时触发</td></tr><tr><td>.tab</td><td>按键是tab时触发</td></tr><tr><td>.delete</td><td>按键是delete时触发</td></tr><tr><td>.esc</td><td>按键是esc时触发</td></tr><tr><td>.up</td><td>按键是up时触发</td></tr><tr><td>.down</td><td>按键是down时触发</td></tr><tr><td>.left</td><td>按键是left时触发</td></tr><tr><td>.right</td><td>按键是right时触发</td></tr></tbody></table><h2 id="_7、动态组件" tabindex="-1">7、动态组件 <a class="header-anchor" href="#_7、动态组件" aria-label="Permalink to &quot;7、动态组件&quot;">​</a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;component/&gt;</code></td><td>定义动态组件。具体显示哪个组件，由“:is”属性的值决定</td></tr><tr><td><code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code></td><td>缓存标签。包裹动态组件后，可以保留上一个组件中的内容</td></tr></tbody></table><h2 id="_8、异步组件" tabindex="-1">8、异步组件 <a class="header-anchor" href="#_8、异步组件" aria-label="Permalink to &quot;8、异步组件&quot;">​</a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Vue.defineAsyncComponent()</td><td>该方法可以创建异步组件（了解即可）</td></tr></tbody></table><h2 id="_9、依赖、注入" tabindex="-1">9、依赖、注入 <a class="header-anchor" href="#_9、依赖、注入" aria-label="Permalink to &quot;9、依赖、注入&quot;">​</a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>provide</td><td>祖先组件，通过<code>provide</code>可以向子孙组件注入依赖</td></tr><tr><td>inject</td><td>孙子组件，通过<code>inject</code>可以在可用的注入内容中搜索需要使用的内容</td></tr></tbody></table><details class="details custom-block"><summary>示例代码</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 父组件</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">steup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  import </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> provide </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  provide(&#39;a&#39;, &#39;a-value&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 子组件</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">steup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  import </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> inject </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  const aValue = inject(&#39;a&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></details>`,21),o=[r];function l(n,c,p,h,i,u){return a(),e("div",null,o)}const v=t(s,[["render",l]]);export{y as __pageData,v as default};
