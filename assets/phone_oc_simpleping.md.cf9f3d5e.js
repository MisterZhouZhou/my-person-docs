import{_ as s,o as n,c as a,X as l}from"./chunks/framework.28451963.js";const A=JSON.parse('{"title":"simpleping","description":"","frontmatter":{},"headers":[],"relativePath":"phone/oc/simpleping.md","filePath":"phone/oc/simpleping.md","lastUpdated":1704191114000}'),p={name:"phone/oc/simpleping.md"},o=l(`<h1 id="simpleping" tabindex="-1">simpleping <a class="header-anchor" href="#simpleping" aria-label="Permalink to &quot;simpleping&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>PING （Packet Internet Groper），因特网 包探索器，用于测试网络连接量的程序。Ping是工作在 TCP/IP 网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送 ICMP （Internet Control Message Protocol 因特网报文控制协议） Echo 请求报文，测试目的站是否可达及了解其有关状态。 Apple 的 SimplePing 封装了 ping 的功能，提供了简单的 API，以编程的方式对没有管理员权限的远程主机执行 ping 操作，支持 IPv4 和 IPv6。</p><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><p>要在自己的项目中使用<a href="https://developer.apple.com/library/archive/samplecode/SimplePing/Introduction/Intro.html#//apple_ref/doc/uid/DTS10000716" target="_blank" rel="noreferrer">SimplePing</a>，需要先下载 SimplePing 文件，并添加到项目中。</p><p>参考项目： <a href="https://github.com/lovesunstar/STPingTest/" target="_blank" rel="noreferrer">https://github.com/lovesunstar/STPingTest/</a></p><h2 id="simpleping-h" tabindex="-1">SimplePing.h <a class="header-anchor" href="#simpleping-h" aria-label="Permalink to &quot;SimplePing.h&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Copyright (C) 2016 Apple Inc. All Rights Reserved.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    See LICENSE.txt for this sample’s licensing information</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Abstract:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    An object wrapper around the low-level BSD Sockets ping function.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">import Foundation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#include </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">AssertMacros</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;font-style:italic;">// for __Check_Compile_Time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">NS_ASSUME_NONNULL_BEGIN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">protocol SimplePingDelegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Controls the IP address version used by SimplePing instances.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">typedef </span><span style="color:#82AAFF;">NS_ENUM</span><span style="color:#A6ACCD;">(NSInteger</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SimplePingAddressStyle) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">SimplePingAddressStyleAny</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">          </span><span style="color:#676E95;font-style:italic;">///&lt; Use the first IPv4 or IPv6 address found; the default.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">SimplePingAddressStyleICMPv4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">       </span><span style="color:#676E95;font-style:italic;">///&lt; Use the first IPv4 address found.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">SimplePingAddressStyleICMPv6</span><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">///&lt; Use the first IPv6 address found.</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! An object wrapper around the low-level BSD Sockets ping function.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details To use the class create an instance, set the delegate and call \`-start\` </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      to start the instance on the current run loop.  If things go well you&#39;ll soon get the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didStartWithAddress:\` delegate callback.  From there you can can call </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-sendPingWithData:\` to send a ping and you&#39;ll receive the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didReceivePingResponsePacket:sequenceNumber:\` and </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didReceiveUnexpectedPacket:\` delegate callbacks as ICMP packets arrive.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      The class can be used from any thread but the use of any single instance must be </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      confined to a specific thread and that thread must run its run loop.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">interface </span><span style="color:#FFCB6B;">SimplePing</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> NSObject</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (instancetype)init NS_UNAVAILABLE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Initialise the object to ping the specified host.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param hostName The DNS name of the host to ping; an IPv4 or IPv6 address in string form will </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      work here.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns The initialised object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (instancetype)</span><span style="color:#FFCB6B;">initWithHostName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)hostName NS_DESIGNATED_INITIALIZER</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A copy of the value passed to \`-initWithHostName:\`.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readonly) NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> hostName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! The delegate for this object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details Delegate callbacks are schedule in the default run loop mode of the run loop of the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      thread that calls \`-start\`.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> weak</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readwrite</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nullable) id</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">SimplePingDelegate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> delegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Controls the IP address version used by the object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details You should set this value before starting the object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readwrite) SimplePingAddressStyle addressStyle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! The address being pinged.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details The contents of the NSData is a (struct sockaddr) of some form.  The </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      value is nil while the object is stopped and remains nil on start until </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didStartWithAddress:\` is called.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readonly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nullable) NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> hostAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readonly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nullable) NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! The address family for \`hostAddress\`, or \`AF_UNSPEC\` if that&#39;s nil.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readonly) sa_family_t hostAddressFamily</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! The identifier used by pings by this object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details When you create an instance of this object it generates a random identifier </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      that it uses to identify its own pings.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readonly) uint16_t identifier</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! The next sequence number to be used by this object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This value starts at zero and increments each time you send a ping (safely </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      wrapping back to zero if necessary).  The sequence number is included in the ping, </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      allowing you to match up requests and responses, and thus calculate ping times and </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      so on.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readonly) uint16_t nextSequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Starts the object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details You should set up the delegate and any ping parameters before calling this.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      If things go well you&#39;ll soon get the \`-simplePing:didStartWithAddress:\` delegate </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      callback, at which point you can start sending pings (via \`-sendPingWithData:\`) and </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      will start receiving ICMP packets (either ping responses, via the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didReceivePingResponsePacket:sequenceNumber:\` delegate callback, or </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      unsolicited ICMP packets, via the \`-simplePing:didReceiveUnexpectedPacket:\` delegate </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      callback).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      If the object fails to start, typically because \`hostName\` doesn&#39;t resolve, you&#39;ll get </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      the \`-simplePing:didFailWithError:\` delegate callback.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      It is not correct to start an already started object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)start</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Sends a ping packet containing the specified data.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details Sends an actual ping.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      The object must be started when you call this method and, on starting the object, you must </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      wait for the \`-simplePing:didStartWithAddress:\` delegate callback before calling it.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param data Some data to include in the ping packet, after the ICMP header, or nil if you </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      want the packet to include a standard 56 byte payload (resulting in a standard 64 byte </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      ping).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">sendPingWithData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(nullable NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Stops the object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details You should call this when you&#39;re done pinging.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      It&#39;s safe to call this on an object that&#39;s stopped.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)stop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A delegate protocol for the SimplePing class.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">protocol SimplePingDelegate </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">NSObject</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">optional</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A SimplePing delegate callback, called once the object has started up.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This is called shortly after you start the object to tell you that the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      object has successfully started.  On receiving this callback, you can call </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-sendPingWithData:\` to send pings.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      If the object didn&#39;t start, \`-simplePing:didFailWithError:\` is called instead.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param pinger The object issuing the callback.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param address The address that&#39;s being pinged; at the time this delegate callback </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      is made, this will have the same value as the \`hostAddress\` property.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didStartWithAddress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A SimplePing delegate callback, called if the object fails to start up.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This is called shortly after you start the object to tell you that the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      object has failed to start.  The most likely cause of failure is a problem </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      resolving \`hostName\`.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      By the time this callback is called, the object has stopped (that is, you don&#39;t </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      need to call \`-stop\` yourself).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param pinger The object issuing the callback.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param error Describes the failure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didFailWithError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSError </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)error</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A SimplePing delegate callback, called when the object has successfully sent a ping packet. </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details Each call to \`-sendPingWithData:\` will result in either a </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didSendPacket:sequenceNumber:\` delegate callback or a </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didFailToSendPacket:sequenceNumber:error:\` delegate callback (unless you </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      stop the object before you get the callback).  These callbacks are currently delivered </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      synchronously from within \`-sendPingWithData:\`, but this synchronous behaviour is not </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      considered API.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param pinger The object issuing the callback.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The packet that was sent; this includes the ICMP header (\`ICMPHeader\`) and the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      data you passed to \`-sendPingWithData:\` but does not include any IP-level headers.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param sequenceNumber The ICMP sequence number of that packet.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didSendPacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t)sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A SimplePing delegate callback, called when the object fails to send a ping packet. </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details Each call to \`-sendPingWithData:\` will result in either a </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didSendPacket:sequenceNumber:\` delegate callback or a </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didFailToSendPacket:sequenceNumber:error:\` delegate callback (unless you </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      stop the object before you get the callback).  These callbacks are currently delivered </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      synchronously from within \`-sendPingWithData:\`, but this synchronous behaviour is not </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      considered API.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param pinger The object issuing the callback.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The packet that was not sent; see \`-simplePing:didSendPacket:sequenceNumber:\` </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      for details.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param sequenceNumber The ICMP sequence number of that packet.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param error Describes the failure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didFailToSendPacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t)sequenceNumber </span><span style="color:#FFCB6B;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSError </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)error</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A SimplePing delegate callback, called when the object receives a ping response.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details If the object receives an ping response that matches a ping request that it </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      sent, it informs the delegate via this callback.  Matching is primarily done based on </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      the ICMP identifier, although other criteria are used as well.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param pinger The object issuing the callback.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The packet received; this includes the ICMP header (\`ICMPHeader\`) and any data that </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      follows that in the ICMP message but does not include any IP-level headers.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param sequenceNumber The ICMP sequence number of that packet.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didReceivePingResponsePacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t)sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A SimplePing delegate callback, called when the object receives an unmatched ICMP message.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details If the object receives an ICMP message that does not match a ping request that it </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      sent, it informs the delegate via this callback.  The nature of ICMP handling in a </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      BSD kernel makes this a common event because, when an ICMP message arrives, it is </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      delivered to all ICMP sockets.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      IMPORTANT: This callback is especially common when using IPv6 because IPv6 uses ICMP </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      for important network management functions.  For example, IPv6 routers periodically </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      send out Router Advertisement (RA) packets via Neighbor Discovery Protocol (NDP), which </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      is implemented on top of ICMP.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      For more on matching, see the discussion associated with </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-simplePing:didReceivePingResponsePacket:sequenceNumber:\`.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param pinger The object issuing the callback.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The packet received; this includes the ICMP header (\`ICMPHeader\`) and any data that </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      follows that in the ICMP message but does not include any IP-level headers.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didReceiveUnexpectedPacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> ICMP On</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">The</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Wire Format</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Describes the on-the-wire header format for an ICMP ping.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This defines the header structure of ping packets on the wire.  Both IPv4 and </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      IPv6 use the same basic structure.  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      This is declared in the header because clients of SimplePing might want to use </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      it parse received ping packets.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">struct ICMPHeader </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">checksum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">identifier</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// data...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">typedef struct ICMPHeader ICMPHeader</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">sizeof</span><span style="color:#A6ACCD;">(ICMPHeader) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(ICMPHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> type) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(ICMPHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> code) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(ICMPHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> checksum) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(ICMPHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> identifier) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(ICMPHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sequenceNumber) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">enum </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ICMPv4TypeEchoRequest</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">          </span><span style="color:#676E95;font-style:italic;">///&lt; The ICMP \`type\` for a ping request; in this case \`code\` is always 0.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ICMPv4TypeEchoReply</span><span style="color:#F07178;">   </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">           </span><span style="color:#676E95;font-style:italic;">///&lt; The ICMP \`type\` for a ping response; in this case \`code\` is always 0.</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">enum </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ICMPv6TypeEchoRequest</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">///&lt; The ICMP \`type\` for a ping request; in this case \`code\` is always 0.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ICMPv6TypeEchoReply</span><span style="color:#F07178;">   </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">129</span><span style="color:#F07178;">         </span><span style="color:#676E95;font-style:italic;">///&lt; The ICMP \`type\` for a ping response; in this case \`code\` is always 0.</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">NS_ASSUME_NONNULL_END</span></span></code></pre></div><h2 id="simpleping-m" tabindex="-1">SimplePing.m <a class="header-anchor" href="#simpleping-m" aria-label="Permalink to &quot;SimplePing.m&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Copyright (C) 2016 Apple Inc. All Rights Reserved.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    See LICENSE.txt for this sample’s licensing information</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Abstract:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    An object wrapper around the low-level BSD Sockets ping function.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SimplePing.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#include </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">sys</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">socket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">#include </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">netinet</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">#include </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">errno</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">#include </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">arpa</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">inet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">#include </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">arpa</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">inet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> IPv4 and ICMPv4 On</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">The</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Wire Format</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Describes the on-the-wire header format for an IPv4 packet.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This defines the header structure of IPv4 packets on the wire.  We need </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      this in order to skip this header in the IPv4 case, where the kernel passes </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      it to us for no obvious reason.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">struct IPv4Header </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">versionAndHeaderLength</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">differentiatedServices</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">totalLength</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">identification</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">flagsAndFragmentOffset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">timeToLive</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">protocol</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">headerChecksum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">sourceAddress</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">destinationAddress</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// options...</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// data...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">typedef struct IPv4Header IPv4Header</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">sizeof</span><span style="color:#A6ACCD;">(IPv4Header) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> versionAndHeaderLength) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> differentiatedServices) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> totalLength) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> identification) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> flagsAndFragmentOffset) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> timeToLive) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> protocol) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> headerChecksum) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sourceAddress) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">__Check_Compile_Time</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">offsetof</span><span style="color:#A6ACCD;">(IPv4Header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> destinationAddress) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Calculates an IP checksum.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This is the standard BSD checksum code, modified to use modern types.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param buffer A pointer to the data to checksum.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param bufferLen The length of that data.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns The checksum value, in network byte order.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">static uint16_t </span><span style="color:#82AAFF;">in_cksum</span><span style="color:#A6ACCD;">(const </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size_t bufferLen) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">size_t</span><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">bytesLeft</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">int32_t</span><span style="color:#F07178;">             </span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;"> *    cursor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">union</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">us</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;">         </span><span style="color:#A6ACCD;">uc</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">last</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">answer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">bytesLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bufferLen</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">cursor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * Our algorithm is simple, using a 32 bit accumulator (sum), we add</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * sequential 16 bit words to it, and at the end, fold back all the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * carry bits from the top 16 bits into the lower 16 bits.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">bytesLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">cursor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cursor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">bytesLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/* mop up an odd byte, if necessary */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">bytesLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">last</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uc</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">cursor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">last</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uc</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">last</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">us</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/* add back carry outs from top 16 bits to low 16 bits */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0xffff</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/* add hi 16 to low 16 */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">			</span><span style="color:#676E95;font-style:italic;">/* add carry */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">answer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">   </span><span style="color:#676E95;font-style:italic;">/* truncate to 16 bits */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">answer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> SimplePing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">interface </span><span style="color:#82AAFF;">SimplePing</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// read/write versions of public properties</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">   readwrite</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nullable) NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">     hostAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readwrite</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nullable) NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readwrite          ) uint16_t     nextSequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// private properties</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! True if nextSequenceNumber has wrapped from 65535 to 0.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readwrite)           BOOL         nextSequenceNumberHasWrapped</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A host object for name-to-address resolution.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> strong</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readwrite</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nullable) CFHostRef host </span><span style="color:#82AAFF;">__attribute__</span><span style="color:#A6ACCD;"> ((NSObject))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! A socket object for ICMP send and receive.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;"> (nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> strong</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> readwrite</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nullable) CFSocketRef socket </span><span style="color:#82AAFF;">__attribute__</span><span style="color:#A6ACCD;"> ((NSObject))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">implementation SimplePing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (instancetype)</span><span style="color:#FFCB6B;">initWithHostName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)hostName </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">NSParameterAssert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">hostName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">_hostName</span><span style="color:#F07178;">   </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">hostName</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">copy</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">_identifier</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">arc4random</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)dealloc </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stop</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Double check that -stop took care of _host and _socket.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">_host</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">_socket</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (sa_family_t)hostAddressFamily </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sa_family_t</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_UNSPEC</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr</span><span style="color:#F07178;">)) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> ((</span><span style="color:#A6ACCD;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">sa_family</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Shuts down the pinger object and tell the delegate about the error.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param error Describes the failure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">didFailWithError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSError </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)error </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">SimplePingDelegate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// We retain ourselves temporarily because it&#39;s common for the delegate method </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// to release its last reference to us, which causes -dealloc to be called here. </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// If we then reference self on the return path, things go badly.  I don&#39;t think </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// that happens currently, but I&#39;ve got into the habit of doing this as a </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// defensive measure.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">CFAutorelease</span><span style="color:#F07178;">( </span><span style="color:#82AAFF;">CFBridgingRetain</span><span style="color:#F07178;">( </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> ))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stop</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">delegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">respondsToSelector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">didFailWithError</span><span style="color:#F07178;">:)] ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailWithError</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Shuts down the pinger object and tell the delegate about the error.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This converts the CFStreamError to an NSError and then call through to </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      -didFailWithError: to do the real work.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param streamError Describes the failure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">didFailWithHostStreamError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(CFStreamError)streamError </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSDictionary</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSError</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">streamError</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFStreamErrorDomainNetDB</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">@{</span><span style="color:#F07178;">(id) kCFGetAddrInfoFailureKey</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> @(</span><span style="color:#A6ACCD;">streamError</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSError</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorWithDomain</span><span style="color:#F07178;">:(</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">kCFErrorDomainCFNetwork</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">kCFHostErrorUnknown</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailWithError</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Builds a ping packet from the supplied parameters.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param type The packet type, which is different for IPv4 and IPv6.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param payload Data to place after the ICMP header.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param requiresChecksum Determines whether a checksum is calculated (IPv4) or not (IPv6).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns A ping packet suitable to be passed to the kernel.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">pingPacketWithType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint8_t)</span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">payload</span><span style="color:#A6ACCD;">:(NSData *)payload requiresChecksum:(BOOL)requiresChecksum {</span></span>
<span class="line"><span style="color:#A6ACCD;">    NSMutableData *         packet</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ICMPHeader </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">            icmpPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    packet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [NSMutableData dataWithLength:</span><span style="color:#82AAFF;">sizeof</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">icmpPtr) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> payload</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#A6ACCD;">(packet </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> nil)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    icmpPtr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mutableBytes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">code </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">checksum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">identifier     </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OSSwapHostToBigInt16</span><span style="color:#A6ACCD;">(self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">identifier)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">sequenceNumber </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OSSwapHostToBigInt16</span><span style="color:#A6ACCD;">(self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">memcpy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">icmpPtr[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [payload bytes]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [payload length])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (requiresChecksum) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The IP checksum routine returns a 16-bit number that&#39;s already in correct byte order </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// (due to wacky 1&#39;s complement maths), so we just put it into the packet as a 16-bit unit.</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">checksum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">in_cksum</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> packet</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">sendPingWithData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)data </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">int</span><span style="color:#F07178;">                     </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ssize_t</span><span style="color:#F07178;">                 </span><span style="color:#A6ACCD;">bytesSent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">SimplePingDelegate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// data may be nil</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">NSParameterAssert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">     </span><span style="color:#676E95;font-style:italic;">// gotta wait for -simplePing:didStartWithAddress:</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Construct the ping packet.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%28zd bottles of beer on the wall</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ssize_t</span><span style="color:#F07178;">) </span><span style="color:#F78C6C;">99</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">size_t</span><span style="color:#F07178;">) (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">) ] </span><span style="color:#A6ACCD;">dataUsingEncoding</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NSASCIIStringEncoding</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Our dummy payload is sized so that the resulting ICMP packet, including the ICMPHeader, is </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 64-bytes, which makes it easier to recognise our packets on the wire.</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">([</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">56</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddressFamily</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pingPacketWithType</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">ICMPv4TypeEchoRequest</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">requiresChecksum</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">YES</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET6</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pingPacketWithType</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">ICMPv6TypeEchoRequest</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">requiresChecksum</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NO</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">NO</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Send the packet.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">bytesSent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">EBADF</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">bytesSent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sendto</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">CFSocketGetNative</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">            (</span><span style="color:#A6ACCD;">socklen_t</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F07178;">        )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">bytesSent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errno</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Handle the results of the send.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">delegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">bytesSent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (((</span><span style="color:#A6ACCD;">NSUInteger</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">bytesSent</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Complete success.  Tell the client.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">respondsToSelector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">didSendPacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:)] ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didSendPacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">NSError</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Some sort of failure.  Tell the client.</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ENOBUFS</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">          </span><span style="color:#676E95;font-style:italic;">// This is not a hugely descriptor error, alas.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSError</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorWithDomain</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NSPOSIXErrorDomain</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">respondsToSelector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">didFailToSendPacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">:)] ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailToSendPacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumberHasWrapped</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">YES</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Calculates the offset of the ICMP header within an IPv4 packet.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details In the IPv4 case the kernel returns us a buffer that includes the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      IPv4 header.  We&#39;re not interested in that, so we have to skip over it. </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      This code does a rough check of the IPv4 header and, if it looks OK, </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      returns the offset of the ICMP header.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The IPv4 packet, as returned to us by the kernel.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns The offset of the ICMP header, or NSNotFound.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> (NSUInteger)</span><span style="color:#FFCB6B;">icmpHeaderOffsetInIPv4Packet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Returns the offset of the ICMPv4Header within an IP packet.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSUInteger</span><span style="color:#F07178;">                  </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> IPv4Header *   ipPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">size_t</span><span style="color:#F07178;">                      </span><span style="color:#A6ACCD;">ipHeaderLength</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NSNotFound</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">IPv4Header</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ICMPHeader</span><span style="color:#F07178;">))) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">ipPtr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">IPv4Header</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( ((</span><span style="color:#A6ACCD;">ipPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">versionAndHeaderLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0xF0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x40</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// IPv4</span></span>
<span class="line"><span style="color:#F07178;">             ( </span><span style="color:#A6ACCD;">ipPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">protocol</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">IPPROTO_ICMP</span><span style="color:#F07178;"> ) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">ipHeaderLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ipPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">versionAndHeaderLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x0F</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">uint32_t</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ipHeaderLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ICMPHeader</span><span style="color:#F07178;">))) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ipHeaderLength</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Checks whether the specified sequence number is one we sent.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param sequenceNumber The incoming sequence number.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns YES if the sequence number looks like one we sent.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (BOOL)</span><span style="color:#FFCB6B;">validateSequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t)sequenceNumber </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumberHasWrapped</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// If the sequence numbers have wrapped that we can&#39;t reliably check </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// whether this is a sequence number we sent.  Rather, we check to see </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// whether the sequence number is within the last 120 sequence numbers </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// we sent.  Note that the uint16_t subtraction here does the right </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// thing regardless of the wrapping.</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Why 120?  Well, if we send one ping per second, 120 is 2 minutes, which </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// is the standard &quot;max time a packet can bounce around the Internet&quot; value.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> ((</span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">) (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">) </span><span style="color:#F78C6C;">120</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Checks whether an incoming IPv4 packet looks like a ping response.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This routine modifies this \`packet\` data!  It does this for two reasons:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      * It needs to zero out the \`checksum\` field of the ICMPHeader in order to do </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *          its checksum calculation.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      * It removes the IPv4 header from the front of the packet.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The IPv4 packet, as returned to us by the kernel.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param sequenceNumberPtr A pointer to a place to start the ICMP sequence number.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns YES if the packet looks like a reasonable IPv4 ping response.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (BOOL)</span><span style="color:#FFCB6B;">validatePing4ResponsePacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSMutableData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)sequenceNumberPtr </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">BOOL</span><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSUInteger</span><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">icmpHeaderOffset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ICMPHeader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">receivedChecksum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">calculatedChecksum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">icmpHeaderOffset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">icmpHeaderOffsetInIPv4Packet</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">icmpHeaderOffset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NSNotFound</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ICMPHeader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) (((</span><span style="color:#A6ACCD;">uint8_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mutableBytes</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">icmpHeaderOffset</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">receivedChecksum</span><span style="color:#F07178;">   </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">checksum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">checksum</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">calculatedChecksum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">in_cksum</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">icmpHeaderOffset</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">checksum</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">receivedChecksum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">receivedChecksum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">calculatedChecksum</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ICMPv4TypeEchoReply</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( </span><span style="color:#82AAFF;">OSSwapBigToHostInt16</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">identifier</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">identifier</span><span style="color:#F07178;"> ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">OSSwapBigToHostInt16</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ([</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validateSequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">                        </span><span style="color:#676E95;font-style:italic;">// Remove the IPv4 header off the front of the data we received, leaving us with </span></span>
<span class="line"><span style="color:#89DDFF;">                        </span><span style="color:#676E95;font-style:italic;">// just the ICMP header and the ping payload.</span></span>
<span class="line"><span style="color:#F07178;">                        [</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">replaceBytesInRange</span><span style="color:#F07178;">:</span><span style="color:#82AAFF;">NSMakeRange</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">icmpHeaderOffset</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">withBytes</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">:</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">sequenceNumberPtr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">YES</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Checks whether an incoming IPv6 packet looks like a ping response.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The IPv6 packet, as returned to us by the kernel; note that this routine</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      could modify this data but does not need to in the IPv6 case.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param sequenceNumberPtr A pointer to a place to start the ICMP sequence number.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns YES if the packet looks like a reasonable IPv4 ping response.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (BOOL)</span><span style="color:#FFCB6B;">validatePing6ResponsePacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSMutableData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)sequenceNumberPtr </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">BOOL</span><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ICMPHeader</span><span style="color:#F07178;"> *      icmpPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// In the IPv6 case we don&#39;t check the checksum because that&#39;s hard (we need to </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// cook up an IPv6 pseudo header and we don&#39;t have the ingredients) and unnecessary </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// (the kernel has already done this check).</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ICMPv6TypeEchoReply</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( </span><span style="color:#82AAFF;">OSSwapBigToHostInt16</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">identifier</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">identifier</span><span style="color:#F07178;"> ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">OSSwapBigToHostInt16</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">icmpPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ([</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validateSequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">sequenceNumberPtr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">YES</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Checks whether an incoming packet looks like a ping response.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param packet The packet, as returned to us by the kernel; note that may end up modifying </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      this data.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param sequenceNumberPtr A pointer to a place to start the ICMP sequence number.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\returns YES if the packet looks like a reasonable IPv4 ping response.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (BOOL)</span><span style="color:#FFCB6B;">validatePingResponsePacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSMutableData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)sequenceNumberPtr </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">BOOL</span><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddressFamily</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validatePing4ResponsePacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumberPtr</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET6</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validatePing6ResponsePacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumberPtr</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">NO</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Reads data from the ICMP socket.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details Called by the socket handling code (SocketReadCallback) to process an ICMP </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      message waiting on the socket.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)readData </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">int</span><span style="color:#F07178;">                     </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr_storage</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">socklen_t</span><span style="color:#F07178;">               </span><span style="color:#A6ACCD;">addrLen</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ssize_t</span><span style="color:#F07178;">                 </span><span style="color:#A6ACCD;">bytesRead</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">                  </span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">enum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kBufferSize</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">65535</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 65535 is the maximum IP packet size, which seems like a reasonable bound </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// here (plus it&#39;s what &lt;x-man-page://8/ping&gt; uses).</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">malloc</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">kBufferSize</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Actually read the data.  We use recvfrom(), and thus get back the source address, </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// but we don&#39;t actually do anything with it.  It would be trivial to pass it to </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// the delegate but we don&#39;t need it in this example.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">addrLen</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">bytesRead</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">recvfrom</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">CFSocketGetNative</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kBufferSize</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">addrLen</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">bytesRead</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errno</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Process the data we read.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">bytesRead</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">NSMutableData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">         </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">SimplePingDelegate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">uint16_t</span><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSMutableData</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dataWithBytes</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">:(</span><span style="color:#A6ACCD;">NSUInteger</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">bytesRead</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// We got some data, pass it up to our client.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">delegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">validatePingResponsePacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">] ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">respondsToSelector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">didReceivePingResponsePacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:)] ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didReceivePingResponsePacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">respondsToSelector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">didReceiveUnexpectedPacket</span><span style="color:#F07178;">:)] ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didReceiveUnexpectedPacket</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">packet</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// We failed to read the data, so shut everything down.</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">EPIPE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailWithError</span><span style="color:#F07178;">:[</span><span style="color:#A6ACCD;">NSError</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorWithDomain</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NSPOSIXErrorDomain</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">free</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Note that we don&#39;t loop back trying to read more data.  Rather, we just </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// let CFSocket call us again.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! The callback for our CFSocket object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This simply routes the call to our \`-readData\` method.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param s See the documentation for CFSocketCallBack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param type See the documentation for CFSocketCallBack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param address See the documentation for CFSocketCallBack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param data See the documentation for CFSocketCallBack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param info See the documentation for CFSocketCallBack; this is actually a pointer to the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      &#39;owning&#39; object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">static </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SocketReadCallback</span><span style="color:#A6ACCD;">(CFSocketRef s</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> CFSocketCallBackType type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> CFDataRef address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> const </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">info) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// This C routine is called by CFSocket when there&#39;s data waiting on our </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ICMP socket.  It just redirects the call to Objective-C code.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">SimplePing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">__bridge</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SimplePing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">([</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isKindOfClass</span><span style="color:#F07178;">:[</span><span style="color:#A6ACCD;">SimplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">]])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">pragma</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unused</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">pragma</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unused</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFSocketReadCallBack</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">pragma</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unused</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">pragma</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unused</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">readData</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Starts the send and receive infrastructure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This is called once we&#39;ve successfully resolved \`hostName\` in to </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`hostAddress\`.  It&#39;s responsible for setting up the socket for sending and </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      receiving pings.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)startWithHostAddress </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">int</span><span style="color:#F07178;">                     </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">int</span><span style="color:#F07178;">                     </span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Open the socket.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddressFamily</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SOCK_DGRAM</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">IPPROTO_ICMP</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errno</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET6</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">AF_INET6</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SOCK_DGRAM</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">IPPROTO_ICMPV6</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errno</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">EPROTONOSUPPORT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailWithError</span><span style="color:#F07178;">:[</span><span style="color:#A6ACCD;">NSError</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorWithDomain</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NSPOSIXErrorDomain</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">CFSocketContext</span><span style="color:#F07178;">         </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (__bridge void *)(self)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">CFRunLoopSourceRef</span><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">rls</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">SimplePingDelegate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Wrap it in a CFSocket and schedule it on the runloop.</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">CFSocketRef</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">CFAutorelease</span><span style="color:#F07178;">( </span><span style="color:#82AAFF;">CFSocketCreateWithNative</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFSocketReadCallBack</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SocketReadCallback</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;">) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The socket will now take care of cleaning up our file descriptor.</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">( </span><span style="color:#82AAFF;">CFSocketGetSocketFlags</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFSocketCloseOnInvalidate</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">rls</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CFSocketCreateRunLoopSource</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rls</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">CFRunLoopAddSource</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">CFRunLoopGetCurrent</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rls</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFRunLoopDefaultMode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">CFRelease</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rls</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">delegate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">respondsToSelector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">didStartWithAddress</span><span style="color:#F07178;">:)] ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            [</span><span style="color:#A6ACCD;">strongDelegate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didStartWithAddress</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Processes the results of our name-to-address resolution.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details Called by our CFHost resolution callback (HostResolveCallback) when host </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      resolution is complete.  We just latch the first appropriate address and kick </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      off the send and receive infrastructure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)hostResolutionDone </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Boolean</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">resolved</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSArray</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">addresses</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Find the first appropriate address.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">addresses</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">__bridge</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NSArray</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">CFHostGetAddressing</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">resolved</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( </span><span style="color:#A6ACCD;">resolved</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">addresses</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">resolved</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">NSData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addresses</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> sockaddr * addrPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">addrPtr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( </span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sizeof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr</span><span style="color:#F07178;">) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">addrPtr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">sa_family</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr_in</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">addr_in</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr_in</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">addrPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">malloc</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">INET_ADDRSTRLEN</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#82AAFF;">inet_ntop</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">addr_in</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">sin_addr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">INET_ADDRSTRLEN</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">addressStyle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SimplePingAddressStyleICMPv6</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#A6ACCD;">resolved</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AF_INET6</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr_in6</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">addr_in6</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">struct</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sockaddr_in6</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">addrPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">malloc</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">INET6_ADDRSTRLEN</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#82AAFF;">inet_ntop</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">AF_INET6</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">addr_in6</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">sin6_addr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">INET6_ADDRSTRLEN</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">addressStyle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SimplePingAddressStyleICMPv4</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#A6ACCD;">resolved</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">resolved</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// We&#39;re done resolving, so shut that down.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stopHostResolution</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// If all is OK, start the send and receive infrastructure, otherwise stop.</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">resolved</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">startWithHostAddress</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailWithError</span><span style="color:#F07178;">:[</span><span style="color:#A6ACCD;">NSError</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errorWithDomain</span><span style="color:#F07178;">:(</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">kCFErrorDomainCFNetwork</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">kCFHostErrorHostNotFound</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! The callback for our CFHost object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\details This simply routes the call to our \`-hostResolutionDone\` or </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      \`-didFailWithHostStreamError:\` methods.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param theHost See the documentation for CFHostClientCallBack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param typeInfo See the documentation for CFHostClientCallBack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param error See the documentation for CFHostClientCallBack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  \\param info See the documentation for CFHostClientCallBack; this is actually a pointer to </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      the &#39;owning&#39; object.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">static </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HostResolveCallback</span><span style="color:#A6ACCD;">(CFHostRef theHost</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> CFHostInfoType typeInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> const CFStreamError </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">info) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// This C routine is called by CFHost when the host resolution is complete. </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// It just redirects the call to the appropriate Objective-C method.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">SimplePing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">__bridge</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SimplePing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">([</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isKindOfClass</span><span style="color:#F07178;">:[</span><span style="color:#A6ACCD;">SimplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">]])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">pragma</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unused</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">theHost</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">theHost</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    #</span><span style="color:#A6ACCD;">pragma</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unused</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">typeInfo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">typeInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFHostAddresses</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( (</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">domain</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailWithHostStreamError</span><span style="color:#F07178;">:</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hostResolutionDone</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)start </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Boolean</span><span style="color:#F07178;">             </span><span style="color:#A6ACCD;">success</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CFHostClientContext</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (__bridge void *)(self)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CFStreamError</span><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">streamError</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">CFHostRef</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">CFAutorelease</span><span style="color:#F07178;">( </span><span style="color:#82AAFF;">CFHostCreateWithName</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">__bridge</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CFStringRef</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostName</span><span style="color:#F07178;">) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">CFHostSetClient</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">HostResolveCallback</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">CFHostScheduleWithRunLoop</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CFRunLoopGetCurrent</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFRunLoopDefaultMode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">success</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CFHostStartInfoResolution</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFHostAddresses</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">streamError</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ( </span><span style="color:#89DDFF;">!</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">success</span><span style="color:#F07178;"> ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">didFailWithHostStreamError</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">streamError</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Stops the name-to-address resolution infrastructure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)stopHostResolution </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Shut down the CFHost.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">CFHostSetClient</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">CFHostUnscheduleFromRunLoop</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CFRunLoopGetCurrent</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kCFRunLoopDefaultMode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*! Stops the send and receive infrastructure.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)stopSocket </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">CFSocketInvalidate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">socket</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)stop </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stopHostResolution</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stopSocket</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Junk the host address on stop.  If the client calls -start again, we&#39;ll </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// re-resolve the host name.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NULL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">end</span></span></code></pre></div><h2 id="mzpingservices-h" tabindex="-1">MZPingServices.h <a class="header-anchor" href="#mzpingservices-h" aria-label="Permalink to &quot;MZPingServices.h&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">typedef NS_ENUM(NSInteger</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> CYPPingStatus) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingStatusDidStart</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingStatusDidFailToSendPacket</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingStatusDidReceivePacket</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingStatusDidReceiveUnexpectedPacket</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingStatusDidTimeout</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingStatusError</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingStatusFinished</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">@interface CYPPingItem : NSObject</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy) NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">originalAddress; </span><span style="color:#676E95;font-style:italic;">// ping的域名</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy) NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">IPAddress; </span><span style="color:#676E95;font-style:italic;">// 客户端请求ip</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign) NSUInteger dateBytesLength; </span><span style="color:#676E95;font-style:italic;">// 数据长度</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign) double timeMilliseconds;</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign) NSInteger timeToLive;</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> assign) NSInteger ICMPSequence; </span><span style="color:#676E95;font-style:italic;">// icmp</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> strong) NSDate </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">sendDate; </span><span style="color:#676E95;font-style:italic;">// 发送数据时间</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> strong) NSDate </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">receivedDate; </span><span style="color:#676E95;font-style:italic;">// 接受数据时间</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic) CYPPingStatus status; </span><span style="color:#676E95;font-style:italic;">// 请求状态</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 分析统计结果</span></span>
<span class="line"><span style="color:#A6ACCD;">+ (NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)statisticsWithPingItems:(NSArray </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pingItems;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">@end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">@interface CYPPingServices : NSObject</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// 超时时间, default 500ms</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic) double timeoutMilliseconds;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// 最大ping次数</span></span>
<span class="line"><span style="color:#A6ACCD;">@property(nonatomic) NSInteger  maximumPingTimes;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">+ (CYPPingServices </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)startPingAddress:(NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)address</span></span>
<span class="line"><span style="color:#A6ACCD;">                      callbackHandler:(void(^)(CYPPingItem </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NSArray </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItems))handler;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">@end</span></span></code></pre></div><h2 id="mzpingservices-m" tabindex="-1">MZPingServices.m <a class="header-anchor" href="#mzpingservices-m" aria-label="Permalink to &quot;MZPingServices.m&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CYPPingServices.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">#</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SimplePing.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">implementation CYPPingItem</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 分析结果</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> (NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">statisticsWithPingItems</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSArray </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pingItems </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//    --- ping statistics ---</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//    5 packets transmitted, 5 packets received, 0.0% packet loss</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//    round-trip min/avg/max/stddev = 4.445/9.496/12.210/2.832 ms</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">pingItems</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstObject</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">__block</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NSInteger</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">receivedCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">allCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">__block</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CGFloat</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">delTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">enumerateObjectsUsingBlock</span><span style="color:#F07178;">:</span><span style="color:#89DDFF;">^</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NSUInteger</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">idx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BOOL</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">stop</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        if </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">obj.status != </span><span style="color:#A6ACCD;font-style:italic;">CYPPingStatusFinished</span><span style="color:#F07178;"> &amp;&amp; obj.status != </span><span style="color:#A6ACCD;font-style:italic;">CYPPingStatusError</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">allCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidReceivePacket</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">delTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">receivedDate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeIntervalSinceDate</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sendDate</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">receivedCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NSMutableString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSMutableString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithCapacity</span><span style="color:#F07178;">:</span><span style="color:#F78C6C;">50</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">appendFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--- %@ ping statistics ---</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CGFloat</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lossPercent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">CGFloat</span><span style="color:#F07178;">)(</span><span style="color:#A6ACCD;">allCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">receivedCount</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MAX</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">allCount</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">appendFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%ld packets transmitted, %ld packets received, %.1f%% packet, loss deltime %.3fms </span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">allCount</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">receivedCount</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lossPercent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">delTime</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">allCount</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringByReplacingOccurrencesOfString</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.0%</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withString</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 生成对应状态描述</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)description </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidStart</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">PING %@ (%@): %ld data bytes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dateBytesLength</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidReceivePacket</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%ld bytes from %@: icmp_seq=%ld ttl=%ld time=%.3fms deltime=%.3fms</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dateBytesLength</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">timeToLive</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">timeMilliseconds</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">     [</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">receivedDate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeIntervalSinceDate</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sendDate</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidTimeout</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Request timeout for icmp_seq %ld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidFailToSendPacket</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Fail to send packet to %@: icmp_seq=%ld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidReceiveUnexpectedPacket</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Receive unexpected packet from %@: icmp_seq=%ld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">long</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusError</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stringWithFormat</span><span style="color:#F07178;">:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Can not ping to %@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">super</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">description</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">interface </span><span style="color:#82AAFF;">CYPPingServices</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">SimplePingDelegate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    NSMutableArray *_pingItems; </span><span style="color:#676E95;font-style:italic;">// ping处理记录</span></span>
<span class="line"><span style="color:#A6ACCD;">    NSInteger   _repingTimes; </span><span style="color:#676E95;font-style:italic;">// 重新请求次数</span></span>
<span class="line"><span style="color:#A6ACCD;">    BOOL _hasStarted; </span><span style="color:#676E95;font-style:italic;">// 是否已经开始</span></span>
<span class="line"><span style="color:#A6ACCD;">    NSInteger _sequenceNumber;</span></span>
<span class="line"><span style="color:#A6ACCD;">    NSDate *_packetSendDate; </span><span style="color:#676E95;font-style:italic;">// 开始发包时间</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;">(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy) NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// ping的地址</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;">(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> strong) SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;">(nonatomic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> copy) </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">callbackHandler)(CYPPingItem </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NSArray </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItems)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// cb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">implementation CYPPingServices</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> (CYPPingServices </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">startPingAddress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)address</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#FFCB6B;">callbackHandler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">)(CYPPingItem </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NSArray </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItems))handler </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingServices</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">services</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingServices</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">initWithAddress</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">services</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackHandler</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handler</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">services</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">startPing</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">services</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (instancetype)</span><span style="color:#FFCB6B;">initWithAddress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSString </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)address </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">timeoutMilliseconds</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">maximumPingTimes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">SimplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">initWithHostName</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">addressStyle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SimplePingAddressStyleAny</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">delegate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSMutableArray</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arrayWithCapacity</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)startPing </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">_repingTimes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">_hasStarted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">removeAllObjects</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">start</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 重新请求</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)reping </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stop</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">start</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)_timeoutActionFired </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidTimeout</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sendDate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_packetSendDate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">receivedDate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSDate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stop</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_handlePingItem</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">_handlePingItem</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(CYPPingItem </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pingItem </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidReceivePacket</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidTimeout</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addObject</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">_repingTimes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">maximumPingTimes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackHandler</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callbackHandler</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">copy</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">_repingTimes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">NSTimer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSTimer</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timerWithTimeInterval</span><span style="color:#F07178;">:</span><span style="color:#F78C6C;">1.0</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">selector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">reping</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">userInfo</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">repeats</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NO</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        [[</span><span style="color:#A6ACCD;">NSRunLoop</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentRunLoop</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">addTimer</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">forMode</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">NSRunLoopCommonModes</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackHandler</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callbackHandler</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">copy</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cancel</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)cancel </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">cancelPreviousPerformRequestsWithTarget</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">selector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">_timeoutActionFired</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">object</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stop</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusFinished</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addObject</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackHandler</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callbackHandler</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">copy</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didStartWithAddress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)address </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">_packetSendDate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSDate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">_hasStarted</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pinger</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidStart</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackHandler</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callbackHandler</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">_hasStarted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">YES</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">pinger</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sendPingWithData</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">performSelector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">_timeoutActionFired</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">withObject</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">afterDelay</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">timeoutMilliseconds</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000.0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didSendPacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t)sequenceNumber </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">_sequenceNumber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 发送包失败</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didFailToSendPacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t)sequenceNumber </span><span style="color:#FFCB6B;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSError </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)error </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">cancelPreviousPerformRequestsWithTarget</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">selector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">_timeoutActionFired</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">object</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// _sequenceNumber = sequenceNumber;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidFailToSendPacket</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_handlePingItem</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 收到异常包数据</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didReceiveUnexpectedPacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">cancelPreviousPerformRequestsWithTarget</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">selector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">_timeoutActionFired</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">object</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dateBytesLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidReceiveUnexpectedPacket</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_handlePingItem</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 收到包数据</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didReceivePingResponsePacket</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSData </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)packet </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(uint16_t)sequenceNumber </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">cancelPreviousPerformRequestsWithTarget</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">selector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">_timeoutActionFired</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">object</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pinger</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dateBytesLength</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">packet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sendDate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_packetSendDate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">receivedDate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">NSDate</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// pingItem.timeToLive = timeToLive;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// pingItem.timeMilliseconds = timeElapsed * 1000;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ICMPSequence</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sequenceNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusDidReceivePacket</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_handlePingItem</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#pragma mark </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 连接</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">发送失败</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">simplePing</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(SimplePing </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)pinger </span><span style="color:#FFCB6B;">didFailWithError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">(NSError </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)error </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">class</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">cancelPreviousPerformRequestsWithTarget</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">selector</span><span style="color:#F07178;">:@</span><span style="color:#82AAFF;">selector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">_timeoutActionFired</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">object</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">nil</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simplePing</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stop</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    CYPPingItem *errorPingItem = [[CYPPingItem alloc] init];</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    errorPingItem.originalAddress = self.address;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    errorPingItem.status = CYPPingStatusError;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    if (self.callbackHandler) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        self.callbackHandler(errorPingItem, [_pingItems copy]);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    }</span></span>
<span class="line"><span style="color:#F07178;">      </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#A6ACCD;">CYPPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alloc</span><span style="color:#F07178;">] </span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">originalAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pinger</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IPAddress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pinger</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CYPPingStatusError</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addObject</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackHandler</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callbackHandler</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">_pingItems</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">copy</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">end</span></span></code></pre></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pingServices </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [MZPingServices startPingAddress:@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> callbackHandler:</span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">(MZPingItem </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NSArray </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pingItems) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pingItem.status != </span><span style="color:#A6ACCD;font-style:italic;">MZPingStatusFinished</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">NSLog</span><span style="color:#F07178;">(@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">111====%@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pingItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">description</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// [weakSelf.textView appendText:pingItem.description];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> else </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">NSString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">MZPingItem</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">statisticsWithPingItems</span><span style="color:#F07178;">:</span><span style="color:#A6ACCD;">pingItems</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">NSLog</span><span style="color:#F07178;">(@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">222====%@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      [weakSelf.textView appendText:[STDPingItem statisticsWithPingItems:pingItems]];</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      [button setTitle:@&quot;Ping&quot; forState:UIControlStateNormal];</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      button.tag = 10001;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pingServices</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nil</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  self.pingServices.timeoutMilliseconds = 10;</span></span>
<span class="line"><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pingServices</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">maximumPingTimes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,16),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
